 ConfigMaps:
##############
 * a set of variables that can be used when defining the environment or command line for your containers.
 * is combined with the Pod right before it is run. This means that the container image and the pod definition itself can be reused across many apps by just changing the ConfigMap that is used.
 Creating ConfigMaps :
 ===================
 my-config.txt
parameter1 = value1
parameter2 = value2

$ kubectl create configmap my-config \
    --from-file=my-config.txt \
    --from-literal=extra-param=extra-value \
    --from-literal=another-param=another-value
* The equivalent YAML for the ConfigMap object we just created is:


Using a ConfigMap:
=================
1] Filesystem : You can mount a ConfigMap into a Pod. A file is created for each entry based on the key name. The contents of that] file are set to the value.
2] Environment variable : A ConfigMap can be used to dynamically set the value of an environment variable.
3] Command-line argument : Kubernetes supports dynamically creating the command line for a container based on ConfigMap values.
* Let’s create a manifest for kuard that pulls all of these together :

apiVersion: v1
kind: Pod
metadata:
 name: kuard-config
spec:
 containers:
 - name: test-container
   image: gcr.io/kuar-demo/kuard-amd64:1
   imagePullPolicy: Always
   command:
    - "/kuard"
    - "$(EXTRA_PARAM)"
   env:
    - name: ANOTHER_PARAM
      valueFrom:
       configMapKeyRef:
       name: my-config
       key: another-param
    - name: EXTRA_PARAM
       valueFrom:
        configMapKeyRef:
         name: my-config
         key: extra-param
    volumeMounts:
    - name: config-volume
      mountPath: /config
 volumes:
 - name: config-volume
   configMap:
    name: my-config
 restartPolicy: Never
 
* For the filesystem method, we create a new volume inside the pod and give it the name config-volume. We then define this volume to be a ConfigMap volume and point at the ConfigMap to mount. We have to specify where this gets mounted into the kuard container with a volumeMount. In this case we are mounting it at /config.

* Environment variables are specified with a special valueFrom member. This references the ConfigMap and the data key to use within that ConfigMap.
* Command-line arguments build on environment variables. Kubernetes will perform the correct substitution with a special $(<env-var-name>) syntax.

$ kubectl apply -f kuard-config.yaml
$ kubectl port-forward kuard-config 8080

Secrets:
########

* include passwords, security tokens, or other types of private keys

Creating Secrets:
=================
* The first step in creating a secret is to obtain the raw data we want to store. The TLS key and certificate for the kuard application can be downloaded.

$ curl -O https://storage.googleapis.com/kuar-demo/kuard.crt
$ curl -O https://storage.googleapis.com/kuar-demo/kuard.key


* Create a secret named kuard-tls using the create secret command:
    $ kubectl create secret generic kuard-tls \
        --from-file=kuard.crt \
        --from-file=kuard.key
* The kuard-tls secret has been created with two data elements. Run the following command to get details:
    $ kubectl describe secrets kuard-tls

Consuming Secrets :
===================
Instead of accessing secrets through the API server, we can use a secrets volume.
Secrets volumes:
---------------
* Secret data can be exposed to pods using the secrets volume type. Secrets volumes are managed by the kubelet and are created at pod creation time.
* Secrets are stored on tmpfs volumes (aka RAM disks) and, as such, are not written to disk on nodes.
* Each data element of a secret is stored in a separate file under the target mount point specified in the volume mount. The kuard-tls secret contains two data elements ; kuard.crt and kuard.key. 
* declare a secrets volume, which exposes the kuard-tls secret to the kuard container under /tls.

apiVersion: v1
kind: Pod
metadata:
 name: kuard-tls
spec:
 containers:
 - name: kuard-tls
   image: gcr.io/kuar-demo/kuard-amd64:1
   imagePullPolicy: Always
   volumeMounts:
   - name: tls-certs
     mountPath: "/tls"
     readOnly: true
 volumes:
 - name: tls-certs
   secret:
    secretName: kuard-tls
    
* Create the kuard-tls pod using kubectl and observe the log output from the running pod 
    $ kubectl apply -f kuard-secret.yaml
    $ kubectl port-forward kuard-tls 8443:8443
   
Private Docker Registries:
--------------------------
* A special use case for secrets is to store access credentials for private Docker registries.
* Image pull secrets leverage the secrets API to automate the distribution of private registry credentials. Image pull secrets are stored just like normal secrets but are consumed through the spec.imagePullSecrets Pod specification field.
* Use the create secret docker-registry to create this special kind of secret;
    $ kubectl create secret docker-registry my-image-pull-secret \
        --docker-username=<username> \
        --docker-password=<password> \
        --docker-email=<email-address>
        

apiVersion: v1
kind: Pod
metadata:
 name: kuard-tls
spec:
 containers:
 - name: kuard-tls
   image: gcr.io/kuar-demo/kuard-amd64:1
   imagePullPolicy: Always
   volumeMounts:
   - name: tls-certs
     mountPath: "/tls"
     readOnly: true
 imagePullSecrets:
 - name: my-image-pull-secret
 volumes:
 - name: tls-certs
   secret:
    secretName: kuard-tls

Managing ConfigMaps and Secrets :
=================================

Listing:-
--------
$ kubectl get secrets
$ kubectl get configmaps
$ kubectl describe configmap my-config
kubectl get configmap my-config -o yaml

Creating:
--------
* create a secret or a ConfigMap is via kubectl create secret generic or kubectl create configmap:
--from-file=<filename> : Load from the file with the secret data key the same as the filename.
--from-file=<key>=<filename> :Load from the file with the secret data key explicitly specified.
--from-file=<directory> :Load all the files in the specified directory where the filename is an
acceptable key name.
--from-literal=<key>=<value> : Use the specified key/value pair directly.

Updating:
---------
1) Update from file :
    If you have a manifest for your ConfigMap or secret, you can just edit it directly and push a new version with kubectl replace -f <filename>. You can also use kubectl apply -f <filename> if you previously created the resource with kubectl apply.
2)Recreate and update :
    If you store the inputs into your ConfigMaps or secrets as separate files on disk (as opposed to embedded into YAML directly), you can use kubectl to recreate    the manifest and then use it to update the object.
        
        $ kubectl create secret generic kuard-tls \
            --from-file=kuard.crt --from-file=kuard.key \
            --dry-run -o yaml | kubectl replace -f -
3) Edit current version:
    $ kubectl edit configmap my-config
4) Live updates :
    Once a ConfigMap or secret is updated using the API, it’ll be automatically
    pushed to all volumes that use that ConfigMap or secret. It may take a few
    seconds, but the file listing and contents of the files, as seen by kuard, will be
    updated with these new values. Using this live update feature you can update the
    configuration of applications without restarting them.

