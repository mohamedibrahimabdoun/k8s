Deployment Internals:
====================
 Just as we learned that ReplicaSets manage Pods, Deployments manage ReplicaSets. As with all relationships in Kubernetes, this relationship is defined by labels and a label selector.
 
 $ kubectl get deployments nginx -o jsonpath --template {.spec.selector.matchLabels}
 
 $ kubectl get replicasets --selector=run=nginx
 * We can resize the Deployment using the imperative scale command:
    $ kubectl scale deployments nginx --replicas=2
 * try the opposite, scaling the ReplicaSet:   
 $ kubectl scale replicasets nginx-1128242161 --replicas=1
 
* When you adjust the number of replicas to one, it no longer matches the desired state of the Deployment, which has replicas set to 2. The Deployment controller notices this and takes action to ensure the observed state matches the desired state, in this case readjusting the number of replicas back to two.

Creating Deployments: 
====================
$ kubectl get deployments nginx --export -o yaml > nginx-deployment.yaml
$ kubectl replace -f nginx-deployment.yaml --save-config

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 annotations:
  deployment.kubernetes.io/revision: "1"
 labels:
  run: nginx
name: nginx
namespace: default
spec:
 replicas: 2
 selector:
  matchLabels:
   run: nginx
 strategy:
  rollingUpdate:
   maxSurge: 1
   maxUnavailable: 1
  type: RollingUpdate
 template:
  metadata:
   labels:
    run: nginx
  spec:
   containers:
   - image: nginx:1.7.12
     imagePullPolicy: Always
   dnsPolicy: ClusterFirst
   restartPolicy: Always
   
* The strategy object dictates the different ways in which a rollout of new software can proceed. There are two different strategies supported by Deployments; Recreate and RollingUpdate.

Managing Deployments:
====================
$ kubectl describe deployments nginx

* Two of the most important pieces of information in the output are OldReplicaSets and NewReplicaSet. These fields point to the ReplicaSet objects this Deployment is currently managing. If a Deployment is in the middle of a rollout, both fields will be set to a value. If a rollout is complete, OldReplicaSets will be set to <none>.

$ kubectl rollout history
$ kubectl rollout status

Updating Deployments:
====================
The two most common operations on a Deployment are scaling and application updates.
 Scaling a Deployment:
 --------------------
     To scale up a Deployment, you would edit your YAML file to increase the number of replicas:
     ...
     spec:
     replicas: 3
     ...
     
 Updating a Container Image :
 ----------------------------
 The other common use case for updating a Deployment is to roll out a new version of the software running in one or more containers.
 
 ...
containers:
- image: nginx:1.9.10
  imagePullPolicy: Always
...

*After you update the Deployment it will trigger a rollout, which you can then monitor via the kubectl rollout command;
    $ kubectl rollout status deployments nginx

 * If you are in the middle of a rollout and you want to temporarily pause it for some reason (e.g., if you start seeing weird behavior in your system and you want to investigate), you can use the pause command;  
    $ kubectl rollout pause deployments nginx
Rollout History :
----------------
$ kubectl rollout history deployment nginx

* The revision history is given in oldest to newest order. A unique revision number is incremented for each new rollout. So far we have two; the initial deployment, the update of the image to nginx:1.9.10

* If you are interested in more details about a particular revision, you can add the --revision flag to view details about that specific revision;
    $ kubectl rollout history deployment nginx --revision=2
* to roll back while you investigate. You can simply undo the last rollout:
    $kubectl rollout undo deployments nginx
* The undo command works regardless of the stage of the rollout. You can undo both partially completed and fully completed rollouts. An undo of a rollout is actually simply a rollout in reverse (e.g., from v2 to v1, instead of from v1 to v2), and all of the same policies that control the rollout strategy apply to the undo strategy as well. You can see the Deployment object simply adjusts the desired replica counts in the managed ReplicaSets:

    $ kubectl get replicasets -o wide
    $ kubectl rollout history deployment nginx
* We previously saw that you can use the kubectl rollout undo command to roll back to a previous version of a deployment. Additionally, you can roll back to a specific revision in the history using the --to-revision flag:
    $ kubectl rollout undo deployments nginx --to-revision=3
* Specifying a revision of 0 is a shorthand way of specifying the previous revision :
    kubectl rollout undo --to-revision=0.
* to keep a maximum of 2 weeksâ€™ worth of revisions,To accomplish this, use the revisionHistoryLimit property in the Deployment specification:
   spec:
   # We do daily rollouts, limit the revision history to two weeks of
   # releases as we don't expect to roll back beyond that.
   revisionHistoryLimit: 14
   
   
Deployment Strategies:
======================


Recreate Strategy:
------------------
* It simply updates the ReplicaSet it manages to use the new image and terminates all of the Pods associated with the Deployment.
* The ReplicaSet notices that it no longer has any replicas, and re-creates all Pods using the new image. Once the Pods are re-created, they are running the new version.

RollingUpdate Strategy :
-----------------------
* Using RollingUpdate, you can roll out a new version *of your service while it is still receiving user traffic, without any downtime.
I) Managing multiple versions of your service :
    * this means that for a period of time, both the new and the old version of your service will be receiving requests and serving traffic.
II) Configuring a rolling update :
    * There are two parameters you can use to tune the rolling update behavior
    - The maxUnavailable:
        + parameter sets the maximum number of Pods that can be unavailable during a rolling update.
        + It can either be set to an absolute number It can either be set to an absolute number.
        + parameter helps tune how quickly a rolling update proceeds.
    - maxSurge :
        + parameter controls how many extra resources can be created to achieve a rollout.
Slowing Rollouts to Ensure Service Health:
-----------------------------------------
* this time to wait is defined by the minReadySeconds parameter;
    ...
    spec:
    minReadySeconds: 60
    ...   
