Cluster Setup:
--------------

 * local-host cluster 

 kind create cluster --config=istio-cluster.yaml 

 Install Calico CNI
 -------------------
 https://docs.tigera.io/calico/latest/getting-started/kubernetes/kind

 kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/calico.yaml

Installing Cilinum CNI
----------------------

helm repo add cilium https://helm.cilium.io/
helm repo update

helm upgrade --install cilium cilium/cilium --version 1.14.2 \
  --namespace kube-system \
  --set kubeProxyReplacement=strict \
  --set k8sServiceHost=istio-control-plane \
  --set k8sServicePort=6443 \
  --set hostServices.enabled=true \
  --set ipam.mode=kubernetes \
  --set nodePort.enabled=true \
  --set externalIPs.enabled=true \
  --set hostServices.enabled=false \
  --set hostPort.enabled=true \
  --set image.pullPolicy=IfNotPresent \
  --set ipam.mode=kubernetes \
  --set ipam.mode=kubernetes \
  --set tunnel=geneve \
  --set bpf.masquerade=true \
  --set ipv4.enabled=true \
  --set ipv6.enabled=false \
  --set hubble.enabled=true \
  --set hubble.relay.enabled=true \
  --set hubble.ui.enabled=true

Install MetalLB:
---------------
helm repo add metallb https://metallb.github.io/metallb
helm repo update

helm install metallb metallb/metallb -n metallb-system --create-namespace

#create IPAddressPool , it has to be in the same kind network rang, to get the subnet use below command
docker inspect network  kind | jq '.[0].IPAM.Config'

[
  {
    "Subnet": "172.18.0.0/16",
    "Gateway": "172.18.0.1"
  },
  {
    "Subnet": "fc00:f853:ccd:e793::/64",
    "Gateway": "fc00:f853:ccd:e793::1"
  }
]


#create IPAddressPool

kubectl apply -f - << EOF
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: first-pool
  namespace: metallb-system
spec:
  addresses:
  - 172.18.1.100-172.18.1.200

EOF

# create L2Advertisement

kubectl apply -f - << EOF
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: example
  namespace: metallb-system
spec:
  ipAddressPools:
  - first-pool
EOF



 install ingress:
 --------------
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml


  # create test ingress

kubectl create deployment my-app --image=nginx:latest --port=80

kubectl expose deployment my-app --type=LoadBalancer --port=80



kubectl create -f - << EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: my-app.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app
            port:
              number: 80
EOF

 Install Helm:
 --------------
 curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm

 Install prometheus:
  --------------

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install --create-namespace --namespace monitoring prometheus prometheus-community/prometheus

Install Grafana:
  --------------

helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
helm install --namespace monitoring grafna grafana/grafana

kubectl get secret --namespace monitoring grafna-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

     export POD_NAME=$(kubectl get pods --namespace monitoring -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafna" -o jsonpath="{.items[0].metadata.name}")
     kubectl --namespace monitoring port-forward $POD_NAME 3000



Install istio:
--------------
helm repo add istio https://istio-release.storage.googleapis.com/charts
helm repo update

kubectl create namespace istio-system

helm install istio-base istio/base -n istio-system --version 1.23.0

helm install istiod istio/istiod -n istio-system \
  --version 1.23.0 \
  --set global.proxy.autoInject=enabled \
  --set global.proxy.privileged=true \
  --set meshConfig.accessLogFile="/dev/stdout"

helm install istio-ingressgateway istio/gateway -n istio-system --version 1.23.0

